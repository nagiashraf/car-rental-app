// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(CarRentalDbContext))]
    partial class CarRentalDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Core.Entities.AllowedLocation", b =>
                {
                    b.Property<int>("PickupLocationId")
                        .HasColumnType("int");

                    b.Property<int>("DropOffLocationId")
                        .HasColumnType("int");

                    b.HasKey("PickupLocationId", "DropOffLocationId");

                    b.HasIndex("DropOffLocationId");

                    b.ToTable("AllowedLocations");
                });

            modelBuilder.Entity("Core.Entities.CurrencyBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("CurrenciesBases");
                });

            modelBuilder.Entity("Core.Entities.CurrencyTranslation", b =>
                {
                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CurrencyId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CurrenciesTranslations");
                });

            modelBuilder.Entity("Core.Entities.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FlagImagePath")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsRtl")
                        .HasColumnType("bit");

                    b.Property<string>("NativeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("Core.Entities.LocationBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.HasKey("Id");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.ToTable("LocationsBases");
                });

            modelBuilder.Entity("Core.Entities.LocationTranslation", b =>
                {
                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("LocationId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("Country", "City", "Name");

                    b.ToTable("LocationsTranslations");
                });

            modelBuilder.Entity("Core.Entities.AllowedLocation", b =>
                {
                    b.HasOne("Core.Entities.LocationBase", "DropOffLocation")
                        .WithMany()
                        .HasForeignKey("DropOffLocationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Core.Entities.LocationBase", "PickUpLocation")
                        .WithMany("AllowedDropOffLocations")
                        .HasForeignKey("PickupLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DropOffLocation");

                    b.Navigation("PickUpLocation");
                });

            modelBuilder.Entity("Core.Entities.CurrencyTranslation", b =>
                {
                    b.HasOne("Core.Entities.CurrencyBase", "CurrencyBase")
                        .WithMany("Translations")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Language", "Language")
                        .WithMany("CurrenciesTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrencyBase");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Core.Entities.LocationTranslation", b =>
                {
                    b.HasOne("Core.Entities.Language", "Language")
                        .WithMany("LocationsTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.LocationBase", "LocationBase")
                        .WithMany("Translations")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("LocationBase");
                });

            modelBuilder.Entity("Core.Entities.CurrencyBase", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("Core.Entities.Language", b =>
                {
                    b.Navigation("CurrenciesTranslations");

                    b.Navigation("LocationsTranslations");
                });

            modelBuilder.Entity("Core.Entities.LocationBase", b =>
                {
                    b.Navigation("AllowedDropOffLocations");

                    b.Navigation("Translations");
                });
#pragma warning restore 612, 618
        }
    }
}
